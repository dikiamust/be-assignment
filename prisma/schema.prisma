// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement()) @map("id")
  name            String           @map("name")
  email           String           @unique @map("email")
  password        String           @map("password")
  salt            String           @map("salt")
  paymentAccounts PaymentAccount[] @relation("PaymentAccounts")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  @@map("users")
}

model PaymentAccount {
  id                    Int                @id @default(autoincrement()) @map("id")
  userId                Int                @map("user_id")
  type                  AccountType        @map("type")
  balance               Float              @default(0.0) @map("balance")
  currency              Currency           @map("currency")
  user                  User               @relation("PaymentAccounts", fields: [userId], references: [id])
  senderTransactions    Transaction[]      @relation("SenderPaymentAccountTransactions")
  recipientTransactions Transaction[]      @relation("RecipientPaymentAccountTransactions")
  recurringPayments     RecurringPayment[] @relation("AccountRecurringPayments")
  createdAt             DateTime           @default(now()) @map("created_at")
  updatedAt             DateTime           @updatedAt @map("updated_at")

  @@map("payment_accounts")
}

model Transaction {
  id                        Int               @id @default(autoincrement()) @map("id")
  senderPaymentAccountId    Int               @map("sender_payment_account_id")
  recipientPaymentAccountId Int?              @map("recipient_payment_account_id")
  amount                    Float             @map("amount")
  currency                  Currency          @map("currency")
  externalRecipient         String?           @map("external_recipient")
  status                    TransactionStatus @map("status")
  type                      TransactionType   @map("type")
  isByScheduler             Boolean           @default(false) @map("is_by_scheduler")
  senderPaymentAccount      PaymentAccount    @relation("SenderPaymentAccountTransactions", fields: [senderPaymentAccountId], references: [id])
  recipientPaymentAccount   PaymentAccount?   @relation("RecipientPaymentAccountTransactions", fields: [recipientPaymentAccountId], references: [id])
  createdAt                 DateTime          @default(now()) @map("created_at")
  updatedAt                 DateTime          @updatedAt @map("updated_at")

  @@map("transactions")
}

model RecurringPayment {
  id                        Int             @id @default(autoincrement()) @map("id")
  paymentAccountId          Int             @map("payment_account_id")
  amount                    Float           @map("amount")
  currency                  Currency        @map("currency")
  interval                  PaymentInterval @map("interval")
  transactionType           TransactionType @map("transaction_type")
  recipientPaymentAccountId Int?            @map("recipient_payment_account_id")
  externalRecipient         String?         @map("external_recipient")
  createdAt                 DateTime        @default(now()) @map("created_at")
  updatedAt                 DateTime        @updatedAt @map("updated_at")
  paymentAccount            PaymentAccount  @relation("AccountRecurringPayments", fields: [paymentAccountId], references: [id])

  @@map("recurring_payments")
}

enum TransactionType {
  TOPUP    @map("top-up")
  SEND     @map("send")
  WITHDRAW @map("withdraw")
}

enum AccountType {
  CREDIT @map("credit")
  DEBIT  @map("debit")
  LOAN   @map("loan")
}

enum Currency {
  USD
  IDR
}

enum TransactionStatus {
  PENDING   @map("pending")
  COMPLETED @map("completed")
  FAILED    @map("failed")
}

enum PaymentInterval {
  DAILY   @map("daily")
  WEEKLY  @map("weekly")
  MONTHLY @map("monthly")
  YEARLY  @map("yearly")
}
